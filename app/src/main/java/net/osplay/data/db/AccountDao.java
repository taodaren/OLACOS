package net.osplay.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.osplay.data.bean.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SCHOOL = new Property(1, String.class, "SCHOOL", false, "SCHOOL");
        public final static Property ISDELETE = new Property(2, String.class, "ISDELETE", false, "ISDELETE");
        public final static Property SHENHE = new Property(3, String.class, "SHENHE", false, "SHENHE");
        public final static Property PHONE = new Property(4, String.class, "PHONE", false, "PHONE");
        public final static Property CREATEDATE = new Property(5, String.class, "CREATEDATE", false, "CREATEDATE");
        public final static Property STU_PATH = new Property(6, String.class, "STU_PATH", false, "STU__PATH");
        public final static Property CN = new Property(7, String.class, "CN", false, "CN");
        public final static Property NICK_NAME = new Property(8, String.class, "NICK_NAME", false, "NICK__NAME");
        public final static Property CARD = new Property(9, String.class, "CARD", false, "CARD");
        public final static Property CARD_F_PATH = new Property(10, String.class, "CARD_F_PATH", false, "CARD__F__PATH");
        public final static Property PASSWORD = new Property(11, String.class, "PASSWORD", false, "PASSWORD");
        public final static Property FANS_COUNT = new Property(12, String.class, "FANS_COUNT", false, "FANS__COUNT");
        public final static Property CARD_B_PATH = new Property(13, String.class, "CARD_B_PATH", false, "CARD__B__PATH");
        public final static Property ID = new Property(14, String.class, "ID", false, "ID");
        public final static Property FOCUS_COUNT = new Property(15, String.class, "FOCUS_COUNT", false, "FOCUS__COUNT");
        public final static Property HEAD_PATH = new Property(16, String.class, "HEAD_PATH", false, "HEAD__PATH");
        public final static Property BIRTHDAY = new Property(17, String.class, "BIRTHDAY", false, "BIRTHDAY");
        public final static Property INTRODUCE = new Property(18, String.class, "INTRODUCE", false, "INTRODUCE");
        public final static Property LOCAL_DRESS = new Property(19, String.class, "LOCAL_DRESS", false, "LOCAL__DRESS");
        public final static Property POINTS = new Property(20, String.class, "POINTS", false, "POINTS");
        public final static Property TARGET = new Property(21, String.class, "TARGET", false, "TARGET");
        public final static Property XINGZUO = new Property(22, String.class, "XINGZUO", false, "XINGZUO");
    }


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCHOOL\" TEXT," + // 1: SCHOOL
                "\"ISDELETE\" TEXT," + // 2: ISDELETE
                "\"SHENHE\" TEXT," + // 3: SHENHE
                "\"PHONE\" TEXT," + // 4: PHONE
                "\"CREATEDATE\" TEXT," + // 5: CREATEDATE
                "\"STU__PATH\" TEXT," + // 6: STU_PATH
                "\"CN\" TEXT," + // 7: CN
                "\"NICK__NAME\" TEXT," + // 8: NICK_NAME
                "\"CARD\" TEXT," + // 9: CARD
                "\"CARD__F__PATH\" TEXT," + // 10: CARD_F_PATH
                "\"PASSWORD\" TEXT," + // 11: PASSWORD
                "\"FANS__COUNT\" TEXT," + // 12: FANS_COUNT
                "\"CARD__B__PATH\" TEXT," + // 13: CARD_B_PATH
                "\"ID\" TEXT," + // 14: ID
                "\"FOCUS__COUNT\" TEXT," + // 15: FOCUS_COUNT
                "\"HEAD__PATH\" TEXT," + // 16: HEAD_PATH
                "\"BIRTHDAY\" TEXT," + // 17: BIRTHDAY
                "\"INTRODUCE\" TEXT," + // 18: INTRODUCE
                "\"LOCAL__DRESS\" TEXT," + // 19: LOCAL_DRESS
                "\"POINTS\" TEXT," + // 20: POINTS
                "\"TARGET\" TEXT," + // 21: TARGET
                "\"XINGZUO\" TEXT);"); // 22: XINGZUO
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SCHOOL = entity.getSCHOOL();
        if (SCHOOL != null) {
            stmt.bindString(2, SCHOOL);
        }
 
        String ISDELETE = entity.getISDELETE();
        if (ISDELETE != null) {
            stmt.bindString(3, ISDELETE);
        }
 
        String SHENHE = entity.getSHENHE();
        if (SHENHE != null) {
            stmt.bindString(4, SHENHE);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(5, PHONE);
        }
 
        String CREATEDATE = entity.getCREATEDATE();
        if (CREATEDATE != null) {
            stmt.bindString(6, CREATEDATE);
        }
 
        String STU_PATH = entity.getSTU_PATH();
        if (STU_PATH != null) {
            stmt.bindString(7, STU_PATH);
        }
 
        String CN = entity.getCN();
        if (CN != null) {
            stmt.bindString(8, CN);
        }
 
        String NICK_NAME = entity.getNICK_NAME();
        if (NICK_NAME != null) {
            stmt.bindString(9, NICK_NAME);
        }
 
        String CARD = entity.getCARD();
        if (CARD != null) {
            stmt.bindString(10, CARD);
        }
 
        String CARD_F_PATH = entity.getCARD_F_PATH();
        if (CARD_F_PATH != null) {
            stmt.bindString(11, CARD_F_PATH);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(12, PASSWORD);
        }
 
        String FANS_COUNT = entity.getFANS_COUNT();
        if (FANS_COUNT != null) {
            stmt.bindString(13, FANS_COUNT);
        }
 
        String CARD_B_PATH = entity.getCARD_B_PATH();
        if (CARD_B_PATH != null) {
            stmt.bindString(14, CARD_B_PATH);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(15, ID);
        }
 
        String FOCUS_COUNT = entity.getFOCUS_COUNT();
        if (FOCUS_COUNT != null) {
            stmt.bindString(16, FOCUS_COUNT);
        }
 
        String HEAD_PATH = entity.getHEAD_PATH();
        if (HEAD_PATH != null) {
            stmt.bindString(17, HEAD_PATH);
        }
 
        String BIRTHDAY = entity.getBIRTHDAY();
        if (BIRTHDAY != null) {
            stmt.bindString(18, BIRTHDAY);
        }
 
        String INTRODUCE = entity.getINTRODUCE();
        if (INTRODUCE != null) {
            stmt.bindString(19, INTRODUCE);
        }
 
        String LOCAL_DRESS = entity.getLOCAL_DRESS();
        if (LOCAL_DRESS != null) {
            stmt.bindString(20, LOCAL_DRESS);
        }
 
        String POINTS = entity.getPOINTS();
        if (POINTS != null) {
            stmt.bindString(21, POINTS);
        }
 
        String TARGET = entity.getTARGET();
        if (TARGET != null) {
            stmt.bindString(22, TARGET);
        }
 
        String XINGZUO = entity.getXINGZUO();
        if (XINGZUO != null) {
            stmt.bindString(23, XINGZUO);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SCHOOL = entity.getSCHOOL();
        if (SCHOOL != null) {
            stmt.bindString(2, SCHOOL);
        }
 
        String ISDELETE = entity.getISDELETE();
        if (ISDELETE != null) {
            stmt.bindString(3, ISDELETE);
        }
 
        String SHENHE = entity.getSHENHE();
        if (SHENHE != null) {
            stmt.bindString(4, SHENHE);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(5, PHONE);
        }
 
        String CREATEDATE = entity.getCREATEDATE();
        if (CREATEDATE != null) {
            stmt.bindString(6, CREATEDATE);
        }
 
        String STU_PATH = entity.getSTU_PATH();
        if (STU_PATH != null) {
            stmt.bindString(7, STU_PATH);
        }
 
        String CN = entity.getCN();
        if (CN != null) {
            stmt.bindString(8, CN);
        }
 
        String NICK_NAME = entity.getNICK_NAME();
        if (NICK_NAME != null) {
            stmt.bindString(9, NICK_NAME);
        }
 
        String CARD = entity.getCARD();
        if (CARD != null) {
            stmt.bindString(10, CARD);
        }
 
        String CARD_F_PATH = entity.getCARD_F_PATH();
        if (CARD_F_PATH != null) {
            stmt.bindString(11, CARD_F_PATH);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(12, PASSWORD);
        }
 
        String FANS_COUNT = entity.getFANS_COUNT();
        if (FANS_COUNT != null) {
            stmt.bindString(13, FANS_COUNT);
        }
 
        String CARD_B_PATH = entity.getCARD_B_PATH();
        if (CARD_B_PATH != null) {
            stmt.bindString(14, CARD_B_PATH);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(15, ID);
        }
 
        String FOCUS_COUNT = entity.getFOCUS_COUNT();
        if (FOCUS_COUNT != null) {
            stmt.bindString(16, FOCUS_COUNT);
        }
 
        String HEAD_PATH = entity.getHEAD_PATH();
        if (HEAD_PATH != null) {
            stmt.bindString(17, HEAD_PATH);
        }
 
        String BIRTHDAY = entity.getBIRTHDAY();
        if (BIRTHDAY != null) {
            stmt.bindString(18, BIRTHDAY);
        }
 
        String INTRODUCE = entity.getINTRODUCE();
        if (INTRODUCE != null) {
            stmt.bindString(19, INTRODUCE);
        }
 
        String LOCAL_DRESS = entity.getLOCAL_DRESS();
        if (LOCAL_DRESS != null) {
            stmt.bindString(20, LOCAL_DRESS);
        }
 
        String POINTS = entity.getPOINTS();
        if (POINTS != null) {
            stmt.bindString(21, POINTS);
        }
 
        String TARGET = entity.getTARGET();
        if (TARGET != null) {
            stmt.bindString(22, TARGET);
        }
 
        String XINGZUO = entity.getXINGZUO();
        if (XINGZUO != null) {
            stmt.bindString(23, XINGZUO);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SCHOOL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ISDELETE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SHENHE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PHONE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CREATEDATE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // STU_PATH
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CN
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // NICK_NAME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CARD
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CARD_F_PATH
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PASSWORD
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FANS_COUNT
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CARD_B_PATH
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FOCUS_COUNT
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // HEAD_PATH
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // BIRTHDAY
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // INTRODUCE
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // LOCAL_DRESS
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // POINTS
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // TARGET
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // XINGZUO
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSCHOOL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setISDELETE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSHENHE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPHONE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCREATEDATE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSTU_PATH(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNICK_NAME(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCARD(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCARD_F_PATH(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPASSWORD(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFANS_COUNT(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCARD_B_PATH(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFOCUS_COUNT(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHEAD_PATH(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBIRTHDAY(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setINTRODUCE(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLOCAL_DRESS(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPOINTS(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTARGET(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setXINGZUO(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
